(* Copyright 2022-2023 Kotoi-Xie Consultancy, Inc. This file is a part of the

==== Bindoj (https://kxc.dev/bindoj) ====

software project that is developed, maintained, and distributed by
Kotoi-Xie Consultancy, Inc. (https://kxc.inc) which is also known as KXC.

Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
by applicable law or agreed to in writing, software distributed under the
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.
                                                                              *)
(* Acknowledgements  --- AnchorZ Inc. ---  The current/initial version or a
significant portion of this file is developed under the funding provided by
AnchorZ Inc. to satisfy its needs in its product development workflow.
                                                                              *)
open Kxclib

open struct
  [@@@warning "-32"]

  let (&) f a = f a
  let (&.) f a = f [a]
end

let lib_gen_generator_dep = "%{workspace_root}/src/lib_gen/unit_test/gen/gen.exe"
let lib_gen_ts_generator_dep = "%{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe"
let json_examples_generator_dep = "%{workspace_root}/with_js/compile-tests/json/gen.exe"
let json_schema_generator_dep = "%{workspace_root}/with_js/compile-tests/schema/gen.exe"

let chop_suffix_exn suffix = String.(chop_suffix suffix &> Option.get)

module Dparts = Dune_file_parts
module Dcomb = struct
  [@@@warning "-32"]

  include Dparts.Fcomb
  include Dparts
  module Action = struct
    include Action
    let run_prettier' ?compact fpath =
      run_npx ?compact "prettier" [
          str "--stdin-filepath";
          fpath;
        ]
    let run_prettier ?compact fpath = run_prettier' ?compact (str fpath)

    let run_ocamlformat' ?compact fname =
      run ?compact "%{bin:ocamlformat}" [str "--name"; fname; str "-"]
    let run_ocamlformat ?compact fname = run_ocamlformat' ?compact (str fname)

    let run_redocly' ?compact input output =
      run_npx ?compact "redocly" [
          str "build-docs";
          input;
          str "--output";
          output;
        ]
  end
end

let () =
  let outf fmt = printf fmt in
  let output_fmtd_newline fmtd = outf "%a@." fmtd () in
  let target = ArgOptions.(get_option_exn (StringOption "-target")) in
  let etarget = match String.chop_suffix ".gen" target with
    | Some base -> Some base
    | _ when target <> "" -> Some target
    | _ -> None in
  let output_duneinc_header target_name =
     outf ";; generated by %s@\n" __FILE__;
     outf ";; file: %s@\n" target_name;
  in
  match target, etarget with
  | _, Some ("typedesc_examples-dune.inc" as target_name) ->
     output_duneinc_header target_name;
     output_fmtd_newline & Dcomb.(
     let ts_module =
       let gen_rule =
         vpbox ~lead:"rule" [
           alias_gen;
           targets [
               fmt "%s_gen.ts";
               fmt "%s_examples.json";
               fmt "%s_schema.json";
             ];
           Deps.(mk [
             named "ts_gen" (atomic lib_gen_ts_generator_dep);
             named "json_gen" (atomic json_examples_generator_dep);
             named "schema_gen" (atomic json_schema_generator_dep);
             atomic "%{workspace_root}/with_js/node_modules"
            ]);
           Action.(vpbox ~lead:"action" &.
             let single gen f =
               with_stdout_to_piped (`expr (fmt f)) [
                 run (sprintf "%%{%s}" gen) [fmt f];
                 run_prettier' ~compact:true (fmt f);
                ] in
             progn [
               single "ts_gen" "%s_gen.ts";
               single "json_gen" "%s_examples.json";
               single "schema_gen" "%s_schema.json";
           ]);
          ] in
       vbox % concat ~sep:cut & [
         gen_rule;

         Rule.mkp_copy_gen (fmt "%s_gen.ts") (fmt "%s.ts");

         subdir "json-examples" &.
           Rule.mkp_copy_gen (fmt "../%s_examples.json") (fmt "%s_examples.json" );

         subdir "json-schema" &.
           Rule.mkp_copy_gen (fmt "../%s_schema.json") (fmt "%s_schema.json");
        ] in
     let caml_module =
       Rule.mkp_gen [
         targets [fmt "%s.ml"; fmt "%s.mli"];
         Deps.(mk [named "generator" & str lib_gen_generator_dep]);
         (let single f =
            let open Action in
            with_stdout_to_piped (`expr (fmt f)) [
              run "%{generator}" [fmt f; str "-gen-type-decl"];
              run_ocamlformat' ~compact:true (fmt f);
             ] in
          Action.mk_progn [
                single "%s.ml";
                single "%s.mli";
           ]);
        ] in
     aggregate [
       (subdir "typedesc_examples/lib_gen" [
          Library.mk []
            ~name:("dev_example_" ^ chop_suffix_exn "-dune.inc" target_name ^ "-lib_gen"
                   |> mangle_library_name)
          ~modules':[list ~sep:sp string]
          ~libraries:[
            "bindoj.base";
            "bindoj.std_runtime";
            "bindoj_test_common_typedesc_examples";
          ];
          many caml_module;
         ]
       |> using (?. (^) "_gen" |> List.map));

       (subdir "typedesc_examples/lib_gen_ts" &.
          many ts_module
       );
      ]
     |> const & Bindoj_test_common_typedesc_examples.All.all |&> fst
  )
  | _, Some ("apidir_examples-dune.inc" as target_name) ->
    output_duneinc_header target_name;
    let compact = true in
    output_fmtd_newline & Dcomb.(
      aggregate [

        subdir "apidir_examples/typescript-metainfo" [
          (Rule.mkp_gen & Action.[
             target' (fmt "%s.ts");
             mk_progn ~stdout_to:`target [
               cat ~compact (fmt "%%{workspace_root}/with_js/apidir-typescript-tests/%s.ts");
               run_prettier' ~compact (str "%{target}");
          ]]) |> many;
         ];

        subdir "apidir_examples/openapi" [
          (Rule.mkp_gen & Action.[
             target' (fmt "%s.json");
             mk_progn ~stdout_to:`target [
               cat ~compact (fmt "%%{workspace_root}/with_js/apidir-tests/%s.json");
               run_prettier' ~compact (str "%{target}");
          ]]) |> many;
         ];

        subdir "apidir_examples/openapi/html" [
          (Rule.mkp_gen & Action.[
             target' (fmt "%s.openapi.html");
             Deps.mk [(fmt "../%s.json")];
             Action.mk &
               run_redocly' ~compact (str "%{deps}") (str "%{target}")
          ]) |> many;
          (Rule.mkp_gen [
             target "index.html";
             Deps.(mk [atomic "%{workspace_root}/example/for_dev/generator/openapi_listing_generator.exe"];);
             Action.(
               run "%{deps}" [str "-samples"; str "\"" ++ list ~sep:(str ":") (fmt "%s") ++ str "\""]
               |> mk ~stdout_to:`target);
          ])
         ];
       ]
      |> const & Bindoj_test_common_apidir_examples.All.all |&> fst
    )
  | t, _ -> eprintf "invalid -target value %S" t; exit 2
