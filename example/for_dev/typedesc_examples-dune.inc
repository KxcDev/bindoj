;; generated by example/for_dev/generator/duneinc_generator.ml
;; file: typedesc_examples-dune.inc
(subdir typedesc_examples/lib_gen
 (library
  (name dev_example_typedesc_examples_lib_gen)
  (modules
   ex_coretype_gen
   ex_alias_gen
   ex_record_gen
   ex_variant_gen
   ex_mangling_gen
   ex_optional_gen
   ex_ident_gen
   ex_nested_gen
   ex_nested_multiply_gen
   ex_version_substring_gen)
  (libraries
   bindoj.base
   bindoj.std_runtime
   bindoj_test_common_typedesc_examples))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_coretype_gen.ml ex_coretype_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_coretype_gen.ml
     (pipe-stdout
      (run %{generator} ex_coretype_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_coretype_gen.ml -)))
    (with-stdout-to ex_coretype_gen.mli
     (pipe-stdout
      (run %{generator} ex_coretype_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_coretype_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_alias_gen.ml ex_alias_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_alias_gen.ml
     (pipe-stdout
      (run %{generator} ex_alias_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_alias_gen.ml -)))
    (with-stdout-to ex_alias_gen.mli
     (pipe-stdout
      (run %{generator} ex_alias_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_alias_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_record_gen.ml ex_record_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_record_gen.ml
     (pipe-stdout
      (run %{generator} ex_record_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_record_gen.ml -)))
    (with-stdout-to ex_record_gen.mli
     (pipe-stdout
      (run %{generator} ex_record_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_record_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_variant_gen.ml ex_variant_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_variant_gen.ml
     (pipe-stdout
      (run %{generator} ex_variant_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_variant_gen.ml -)))
    (with-stdout-to ex_variant_gen.mli
     (pipe-stdout
      (run %{generator} ex_variant_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_variant_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_mangling_gen.ml ex_mangling_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_mangling_gen.ml
     (pipe-stdout
      (run %{generator} ex_mangling_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_mangling_gen.ml -)))
    (with-stdout-to ex_mangling_gen.mli
     (pipe-stdout
      (run %{generator} ex_mangling_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_mangling_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_optional_gen.ml ex_optional_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_optional_gen.ml
     (pipe-stdout
      (run %{generator} ex_optional_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_optional_gen.ml -)))
    (with-stdout-to ex_optional_gen.mli
     (pipe-stdout
      (run %{generator} ex_optional_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_optional_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_ident_gen.ml ex_ident_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_ident_gen.ml
     (pipe-stdout
      (run %{generator} ex_ident_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_ident_gen.ml -)))
    (with-stdout-to ex_ident_gen.mli
     (pipe-stdout
      (run %{generator} ex_ident_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_ident_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_nested_gen.ml ex_nested_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_nested_gen.ml
     (pipe-stdout
      (run %{generator} ex_nested_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_nested_gen.ml -)))
    (with-stdout-to ex_nested_gen.mli
     (pipe-stdout
      (run %{generator} ex_nested_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_nested_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_nested_multiply_gen.ml ex_nested_multiply_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_nested_multiply_gen.ml
     (pipe-stdout
      (run %{generator} ex_nested_multiply_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_nested_multiply_gen.ml -)))
    (with-stdout-to ex_nested_multiply_gen.mli
     (pipe-stdout
      (run %{generator} ex_nested_multiply_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_nested_multiply_gen.mli -))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (targets ex_version_substring_gen.ml ex_version_substring_gen.mli)
  (deps (:generator %{workspace_root}/src/lib_gen/unit_test/gen/gen.exe))
  (action
   (progn
    (with-stdout-to ex_version_substring_gen.ml
     (pipe-stdout
      (run %{generator} ex_version_substring_gen.ml -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_version_substring_gen.ml -)))
    (with-stdout-to ex_version_substring_gen.mli
     (pipe-stdout
      (run %{generator} ex_version_substring_gen.mli -gen-type-decl)
      (run %{bin:ocamlformat} --name ex_version_substring_gen.mli -)))))))
(subdir typedesc_examples/lib_gen_ts
 (rule
  (alias gen)
  (targets
   ex_coretype_gen.ts
   ex_coretype_examples.json
   ex_coretype_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_coretype_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_coretype_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_coretype_gen.ts)))
    (with-stdout-to ex_coretype_examples.json
     (pipe-stdout
      (run %{json_gen} ex_coretype_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_coretype_examples.json)))
    (with-stdout-to ex_coretype_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_coretype_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_coretype_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_coretype_gen.ts ex_coretype.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_coretype_examples.json ex_coretype_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_coretype_schema.json ex_coretype_schema.json))))
 (rule
  (alias gen)
  (targets ex_alias_gen.ts ex_alias_examples.json ex_alias_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_alias_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_alias_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_alias_gen.ts)))
    (with-stdout-to ex_alias_examples.json
     (pipe-stdout
      (run %{json_gen} ex_alias_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_alias_examples.json)))
    (with-stdout-to ex_alias_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_alias_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_alias_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_alias_gen.ts ex_alias.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_alias_examples.json ex_alias_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_alias_schema.json ex_alias_schema.json))))
 (rule
  (alias gen)
  (targets ex_record_gen.ts ex_record_examples.json ex_record_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_record_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_record_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_record_gen.ts)))
    (with-stdout-to ex_record_examples.json
     (pipe-stdout
      (run %{json_gen} ex_record_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_record_examples.json)))
    (with-stdout-to ex_record_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_record_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_record_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_record_gen.ts ex_record.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_record_examples.json ex_record_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_record_schema.json ex_record_schema.json))))
 (rule
  (alias gen)
  (targets ex_variant_gen.ts ex_variant_examples.json ex_variant_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_variant_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_variant_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_variant_gen.ts)))
    (with-stdout-to ex_variant_examples.json
     (pipe-stdout
      (run %{json_gen} ex_variant_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_variant_examples.json)))
    (with-stdout-to ex_variant_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_variant_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_variant_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_variant_gen.ts ex_variant.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_variant_examples.json ex_variant_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_variant_schema.json ex_variant_schema.json))))
 (rule
  (alias gen)
  (targets
   ex_mangling_gen.ts
   ex_mangling_examples.json
   ex_mangling_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_mangling_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_mangling_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_mangling_gen.ts)))
    (with-stdout-to ex_mangling_examples.json
     (pipe-stdout
      (run %{json_gen} ex_mangling_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_mangling_examples.json)))
    (with-stdout-to ex_mangling_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_mangling_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_mangling_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_mangling_gen.ts ex_mangling.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_mangling_examples.json ex_mangling_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_mangling_schema.json ex_mangling_schema.json))))
 (rule
  (alias gen)
  (targets
   ex_optional_gen.ts
   ex_optional_examples.json
   ex_optional_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_optional_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_optional_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_optional_gen.ts)))
    (with-stdout-to ex_optional_examples.json
     (pipe-stdout
      (run %{json_gen} ex_optional_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_optional_examples.json)))
    (with-stdout-to ex_optional_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_optional_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_optional_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_optional_gen.ts ex_optional.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_optional_examples.json ex_optional_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_optional_schema.json ex_optional_schema.json))))
 (rule
  (alias gen)
  (targets ex_ident_gen.ts ex_ident_examples.json ex_ident_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_ident_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_ident_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_ident_gen.ts)))
    (with-stdout-to ex_ident_examples.json
     (pipe-stdout
      (run %{json_gen} ex_ident_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_ident_examples.json)))
    (with-stdout-to ex_ident_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_ident_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_ident_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_ident_gen.ts ex_ident.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_ident_examples.json ex_ident_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_ident_schema.json ex_ident_schema.json))))
 (rule
  (alias gen)
  (targets ex_nested_gen.ts ex_nested_examples.json ex_nested_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_nested_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_nested_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_gen.ts)))
    (with-stdout-to ex_nested_examples.json
     (pipe-stdout
      (run %{json_gen} ex_nested_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_examples.json)))
    (with-stdout-to ex_nested_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_nested_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_nested_gen.ts ex_nested.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_nested_examples.json ex_nested_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_nested_schema.json ex_nested_schema.json))))
 (rule
  (alias gen)
  (targets
   ex_nested_multiply_gen.ts
   ex_nested_multiply_examples.json
   ex_nested_multiply_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_nested_multiply_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_nested_multiply_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_multiply_gen.ts)))
    (with-stdout-to ex_nested_multiply_examples.json
     (pipe-stdout
      (run %{json_gen} ex_nested_multiply_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_multiply_examples.json)))
    (with-stdout-to ex_nested_multiply_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_nested_multiply_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_nested_multiply_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_nested_multiply_gen.ts ex_nested_multiply.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_nested_multiply_examples.json ex_nested_multiply_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_nested_multiply_schema.json ex_nested_multiply_schema.json))))
 (rule
  (alias gen)
  (targets
   ex_version_substring_gen.ts
   ex_version_substring_examples.json
   ex_version_substring_schema.json)
  (deps
   (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
   (:json_gen %{workspace_root}/with_js/compile-tests/generator/gen_json.exe)
   (:schema_gen
    %{workspace_root}/with_js/compile-tests/generator/gen_schema.exe)
   %{workspace_root}/with_js/node_modules)
  (action
   (progn
    (with-stdout-to ex_version_substring_gen.ts
     (pipe-stdout
      (run %{ts_gen} ex_version_substring_gen.ts)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_version_substring_gen.ts)))
    (with-stdout-to ex_version_substring_examples.json
     (pipe-stdout
      (run %{json_gen} ex_version_substring_examples.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_version_substring_examples.json)))
    (with-stdout-to ex_version_substring_schema.json
     (pipe-stdout
      (run %{schema_gen} ex_version_substring_schema.json)
      (run %{bin:npx} --prefix %{workspace_root}/with_js prettier --stdin-filepath ex_version_substring_schema.json))))))
 (rule
  (alias gen)
  (mode (promote (until-clean)))
  (action
   (copy ex_version_substring_gen.ts ex_version_substring.ts)))
 (subdir json-examples
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_version_substring_examples.json ex_version_substring_examples.json))))
 (subdir json-schema
  (rule
   (alias gen)
   (mode (promote (until-clean)))
   (action
    (copy ../ex_version_substring_schema.json ex_version_substring_schema.json)))))
