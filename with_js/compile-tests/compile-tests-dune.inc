;; generated by with_js/compile-tests/generator/duneinc_generator.ml
;; file: compile-tests-dune.inc
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets
  ex_coretype_gen.ts
  ex_coretype_examples.json
  ex_coretype_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_coretype_gen.ts
    (run %{ts_gen} ex_coretype_gen.ts))
   (with-stdout-to ex_coretype_examples.json
    (run %{json_gen} ex_coretype_examples.json))
   (with-stdout-to ex_coretype_schema.json
    (run %{schema_gen} ex_coretype_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets ex_alias_gen.ts ex_alias_examples.json ex_alias_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_alias_gen.ts
    (run %{ts_gen} ex_alias_gen.ts))
   (with-stdout-to ex_alias_examples.json
    (run %{json_gen} ex_alias_examples.json))
   (with-stdout-to ex_alias_schema.json
    (run %{schema_gen} ex_alias_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets ex_record_gen.ts ex_record_examples.json ex_record_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_record_gen.ts
    (run %{ts_gen} ex_record_gen.ts))
   (with-stdout-to ex_record_examples.json
    (run %{json_gen} ex_record_examples.json))
   (with-stdout-to ex_record_schema.json
    (run %{schema_gen} ex_record_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets ex_variant_gen.ts ex_variant_examples.json ex_variant_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_variant_gen.ts
    (run %{ts_gen} ex_variant_gen.ts))
   (with-stdout-to ex_variant_examples.json
    (run %{json_gen} ex_variant_examples.json))
   (with-stdout-to ex_variant_schema.json
    (run %{schema_gen} ex_variant_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets
  ex_mangling_gen.ts
  ex_mangling_examples.json
  ex_mangling_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_mangling_gen.ts
    (run %{ts_gen} ex_mangling_gen.ts))
   (with-stdout-to ex_mangling_examples.json
    (run %{json_gen} ex_mangling_examples.json))
   (with-stdout-to ex_mangling_schema.json
    (run %{schema_gen} ex_mangling_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets
  ex_optional_gen.ts
  ex_optional_examples.json
  ex_optional_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_optional_gen.ts
    (run %{ts_gen} ex_optional_gen.ts))
   (with-stdout-to ex_optional_examples.json
    (run %{json_gen} ex_optional_examples.json))
   (with-stdout-to ex_optional_schema.json
    (run %{schema_gen} ex_optional_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets ex_ident_gen.ts ex_ident_examples.json ex_ident_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_ident_gen.ts
    (run %{ts_gen} ex_ident_gen.ts))
   (with-stdout-to ex_ident_examples.json
    (run %{json_gen} ex_ident_examples.json))
   (with-stdout-to ex_ident_schema.json
    (run %{schema_gen} ex_ident_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets ex_nested_gen.ts ex_nested_examples.json ex_nested_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_nested_gen.ts
    (run %{ts_gen} ex_nested_gen.ts))
   (with-stdout-to ex_nested_examples.json
    (run %{json_gen} ex_nested_examples.json))
   (with-stdout-to ex_nested_schema.json
    (run %{schema_gen} ex_nested_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets
  ex_nested_multiply_gen.ts
  ex_nested_multiply_examples.json
  ex_nested_multiply_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_nested_multiply_gen.ts
    (run %{ts_gen} ex_nested_multiply_gen.ts))
   (with-stdout-to ex_nested_multiply_examples.json
    (run %{json_gen} ex_nested_multiply_examples.json))
   (with-stdout-to ex_nested_multiply_schema.json
    (run %{schema_gen} ex_nested_multiply_schema.json)))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (targets
  ex_version_substring_gen.ts
  ex_version_substring_examples.json
  ex_version_substring_schema.json)
 (deps
  (:ts_gen %{workspace_root}/src/lib_gen_ts/unit_test/gen/gen.exe)
  (:json_gen generator/gen_json.exe)
  (:schema_gen generator/gen_schema.exe)
  ../node_modules)
 (action
  (progn
   (with-stdout-to ex_version_substring_gen.ts
    (run %{ts_gen} ex_version_substring_gen.ts))
   (with-stdout-to ex_version_substring_examples.json
    (run %{json_gen} ex_version_substring_examples.json))
   (with-stdout-to ex_version_substring_schema.json
    (run %{schema_gen} ex_version_substring_schema.json)))))
