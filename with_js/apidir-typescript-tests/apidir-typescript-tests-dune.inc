;; generated by with_js/apidir-typescript-tests/gen/duneinc_generator.ml
;; file: apidir-typescript-tests-dune.inc
(rule
 (alias gen)
 (target sample_apidir_01_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_01_mock_server.ml
   (run %{mock_server_gen} sample_apidir_01_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_01_no_mangling_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_01_no_mangling_mock_server.ml
   (run %{mock_server_gen} sample_apidir_01_no_mangling_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_02_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_02_mock_server.ml
   (run %{mock_server_gen} sample_apidir_02_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_03_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_03_mock_server.ml
   (run %{mock_server_gen} sample_apidir_03_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_04_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_04_mock_server.ml
   (run %{mock_server_gen} sample_apidir_04_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_05_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_05_mock_server.ml
   (run %{mock_server_gen} sample_apidir_05_mock_server.ml))))
(rule
 (alias gen)
 (target sample_apidir_06_mock_server.ml)
 (deps (:mock_server_gen gen/gen_server.exe))
 (action
  (with-stdout-to sample_apidir_06_mock_server.ml
   (run %{mock_server_gen} sample_apidir_06_mock_server.ml))))
(executable
 (name sample_apidir_01_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_01_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_01_no_mangling_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_01_no_mangling_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_02_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_02_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_03_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_03_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_04_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_04_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_05_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_05_mock_server)
 (libraries gen_mock_server))
(executable
 (name sample_apidir_06_mock_server)
 (preprocess (pps js_of_ocaml-ppx))
 (modes js)
 (modules sample_apidir_06_mock_server)
 (libraries gen_mock_server))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_01_server.js)
 (deps sample_apidir_01_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_01_no_mangling_server.js)
 (deps sample_apidir_01_no_mangling_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_02_server.js)
 (deps sample_apidir_02_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_03_server.js)
 (deps sample_apidir_03_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_04_server.js)
 (deps sample_apidir_04_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_05_server.js)
 (deps sample_apidir_05_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_06_server.js)
 (deps sample_apidir_06_mock_server.bc.js)
 (action
  (copy %{deps} %{target})))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_01.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_01_no_mangling.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_02.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_03.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_04.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_05.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
(rule
 (alias gen)
 (mode (promote (until-clean)))
 (target sample_apidir_06.ts)
 (deps (:metainfo_gen gen/gen.exe))
 (action
  (with-stdout-to %{target}
   (run %{metainfo_gen} %{target}))))
