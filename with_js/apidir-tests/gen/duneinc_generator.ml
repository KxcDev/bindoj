(* Copyright 2022-2023 Kotoi-Xie Consultancy, Inc. This file is a part of the

==== Bindoj (https://kxc.dev/bindoj) ====

software project that is developed, maintained, and distributed by
Kotoi-Xie Consultancy, Inc. (https://kxc.inc) which is also known as KXC.

Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0. Unless required
by applicable law or agreed to in writing, software distributed under the
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, either express or implied. See the License for the specific
language governing permissions and limitations under the License.
                                                                              *)
(* Acknowledgements  --- AnchorZ Inc. ---  The current/initial version or a
significant portion of this file is developed under the funding provided by
AnchorZ Inc. to satisfy its needs in its product development workflow.
                                                                              *)
let apidir_generator_dep = "gen/gen.exe"

module Dparts = Dune_file_parts
include Dparts.Fcomb.Ops

module Dcomb = struct
  [@@@warning "-32"]

  include Dparts.Fcomb
  include Dparts
end

let () =
  let outf fmt = printf fmt in
  let output_fmtd_newline fmtd = outf "%a@." fmtd () in
  let target = ArgOptions.(get_option_exn (StringOption "-target")) in
  let output_duneinc_header target_name =
     outf ";; generated by %s@\n" __FILE__;
     outf ";; file: %s@\n" target_name;
  in
  match String.chop_suffix ".gen" target with
  | Some ("apidir-tests-dune.inc" as target_name) ->
    output_duneinc_header target_name;
    output_fmtd_newline & Dcomb.(
      aggregate [
        Rule.mkp_gen [
          target' (fmt "%s.json");
          Deps.(mk [
            named "apidir_gen" (atomic apidir_generator_dep);
          ]);
          Action.(mk &
            with_stdout_to (`expr (fmt "%s.json")) (
              run "%{apidir_gen}" [ fmt "%s.json" ]
            ));
        ]
        |> many;
        Rule.mk ~alias:"runtest" [
          Deps.(mk [
            atomic "(sandbox none)";
            named "outputs" (fmt "%s.json" |> many);
            atomic "(file ../.redocly.yaml)";
            atomic "../node_modules"
          ]);
          Action.(mk &
            with_accepted_exit_code 0 (
              run_npx "redocly" [
                str "lint";
                str "--config";
                str "../.redocly.yaml";
                str "%{outputs}"
              ])
          );
        ];
      ]
      |> const & Bindoj_test_common_apidir_examples.All.all |&> fst
    )
  | _ -> eprintf "invalid -target value %S" target; exit 2
